<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IMSiuPong</title>
  
  <subtitle>PangJunJie</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.imsiupong.top/"/>
  <updated>2018-04-19T06:20:12.213Z</updated>
  <id>http://www.imsiupong.top/</id>
  
  <author>
    <name>庞俊杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Runtime系列开篇</title>
    <link href="http://www.imsiupong.top/2018/04/19/Runtime%E7%B3%BB%E5%88%97%E5%BC%80%E7%AF%87/"/>
    <id>http://www.imsiupong.top/2018/04/19/Runtime系列开篇/</id>
    <published>2018-04-19T06:09:56.000Z</published>
    <updated>2018-04-19T06:20:12.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>将在工作学习中使用到的Runtime搜集并整理成如下几类:</p><ol><li><a href="http://imsiupong.top/2018/04/18/ClassAndObjects/" target="_blank" rel="noopener">Class &amp;&amp; Object</a></li><li>Property &amp;&amp; Method</li><li>Category &amp;&amp; Association Object</li><li>Message</li><li>上层API</li><li>Runtime应用</li><li>其他</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>苹果官方文档： <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1" target="_blank" rel="noopener">Runtime</a></li><li>Runtime的源码： <a href="https://blog.csdn.net/wotors/article/details/54426316" target="_blank" rel="noopener">可编译源码</a></li><li>其他技术博客：<ul><li><a href="https://www.jianshu.com/u/43bb8b1a9d39" target="_blank" rel="noopener">Haven_ZN</a></li><li><a href="https://draveness.me/index" target="_blank" rel="noopener">Draveness</a></li><li><a href="http://vanney9.com/2017/06/03/objective-c-runtime-summarize/" target="_blank" rel="noopener">Vanney</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;将在工作学习中使用到的Runtime搜集并整理成如下几类:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://imsiupong.t
      
    
    </summary>
    
    
      <category term="iOS Runtime Develop" scheme="http://www.imsiupong.top/tags/iOS-Runtime-Develop/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C引用计数原理分析</title>
    <link href="http://www.imsiupong.top/2018/04/19/Objective-C%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>http://www.imsiupong.top/2018/04/19/Objective-C引用计数原理分析/</id>
    <published>2018-04-19T01:00:00.000Z</published>
    <updated>2018-04-19T06:05:00.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Objective-C引用计数原理分析"><a href="#Objective-C引用计数原理分析" class="headerlink" title="Objective-C引用计数原理分析"></a>Objective-C引用计数原理分析</h1><ul><li>本文使用的源码来自<code>objc-4 723</code>和<code>CF-1153.18</code></li><li>本文前半部分着重介绍基本原理，后半部分可以尝试着结合实际问题分析</li><li>本文是在看到<a href="http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/" target="_blank" rel="noopener">玉令天下的Objective-C 引用计数原理</a>后决定自己尝试分析源码学习相关知识</li><li>本文也参考了太阳神的这篇<a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="noopener">黑幕背后的Autorelease</a>文章</li></ul><p>##引用计数的存储方式</p><ol><li>如果对象支持使用<code>TaggedPointer</code>, 那么苹果会直接将其指针值作为引用计数返回</li><li>如果当前设备是64位环境并且使用Objective-C 2.0，那么“一些”对象会使用其<code>isa</code>指针的一部分空间来存储它的引用计数</li><li>另外一种情况是<code>Runtime</code>会使用一张散列表来管理引用计数</li><li>是否使用垃圾回收（用UseGC属性判断），但这种早已弃用的东西就不要管了，而且初始化垃圾回收机制的<code>void gc_init(BOOL wantsGC)</code>方法一直被传入 NO。</li></ol><h3 id="TaggedPointer"><a href="#TaggedPointer" class="headerlink" title="TaggedPointer"></a>TaggedPointer</h3><p>判断对象是否使用TaggedPointer是看<code>_OBJC_TAG_MASK</code>的标志位是否是1UL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#if OBJC_MSB_TAGGED_POINTERS</span><br><span class="line">#   define _OBJC_TAG_MASK (1UL&lt;&lt;63)</span><br><span class="line">#else</span><br><span class="line">#   define _OBJC_TAG_MASK 1UL</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">static inline bool </span><br><span class="line">_objc_isTaggedPointer(const void * _Nullable ptr) &#123;</span><br><span class="line">    return ((uintptr_t)ptr &amp; _OBJC_TAG_MASK) == _OBJC_TAG_MASK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void </span><br><span class="line">objc_object::initIsa(Class cls, bool nonpointer, bool hasCxxDtor) </span><br><span class="line">&#123; </span><br><span class="line">    assert(!isTaggedPointer()); </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>id</code>其实就是<code>objc_object *</code>的简写<code>（typedef struct objc_object *id;）</code>，它的<code>isTaggedPointer()</code>方法经常会在操作引用计数时用到，因为这决定了存储引用计数的策略。</p><h3 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h3><p>基础知识：<a href="http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html" target="_blank" rel="noopener">为什么使用nonpointer</a></p><p>用<code>64 bit</code>存储一个内存地址显然是种浪费，毕竟很少有那么大内存的设备。于是可以优化存储方案，用一部分额外空间存储其他内容。这里列出不同架构下的64位环境中<code>isa</code>指针结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">union isa_t </span><br><span class="line">&#123;</span><br><span class="line">    isa_t() &#123; &#125;</span><br><span class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Class cls; //对像所属的类在内存的位置或类的信息</span><br><span class="line">    uintptr_t bits;</span><br><span class="line"></span><br><span class="line">#if SUPPORT_PACKED_ISA</span><br><span class="line"></span><br><span class="line">    // extra_rc must be the MSB-most field (so it matches carry/overflow flags)</span><br><span class="line">    // nonpointer must be the LSB (fixme or get rid of it)</span><br><span class="line">    // shiftcls must occupy the same bits that a real class pointer would</span><br><span class="line">    // bits + RC_ONE is equivalent to extra_rc + 1</span><br><span class="line">    // RC_HALF is the high bit of extra_rc (i.e. half of its range)</span><br><span class="line"></span><br><span class="line">    // future expansion:</span><br><span class="line">    // uintptr_t fast_rr : 1;     // no r/r overrides</span><br><span class="line">    // uintptr_t lock : 2;        // lock for atomic property, @synch</span><br><span class="line">    // uintptr_t extraBytes : 1;  // allocated with extra bytes</span><br><span class="line">    // nonpointer</span><br><span class="line"># if __arm64__</span><br><span class="line">#   define ISA_MASK        0x0000000ffffffff8ULL</span><br><span class="line">#   define ISA_MAGIC_MASK  0x000003f000000001ULL</span><br><span class="line">#   define ISA_MAGIC_VALUE 0x000001a000000001ULL</span><br><span class="line">    struct &#123;</span><br><span class="line">        uintptr_t nonpointer        : 1;</span><br><span class="line">        uintptr_t has_assoc         : 1;</span><br><span class="line">        uintptr_t has_cxx_dtor      : 1;</span><br><span class="line">        uintptr_t shiftcls          : 33; // MACH_VM_MAX_ADDRESS 0x1000000000 (uintptr_t)cls &gt;&gt; 3类的地址右移三位 因为类的地址的后三位没有实际作用</span><br><span class="line">        uintptr_t magic             : 6;</span><br><span class="line">        uintptr_t weakly_referenced : 1;</span><br><span class="line">        uintptr_t deallocating      : 1;</span><br><span class="line">        uintptr_t has_sidetable_rc  : 1;</span><br><span class="line">        uintptr_t extra_rc          : 19;</span><br><span class="line">#       define RC_ONE   (1ULL&lt;&lt;45)</span><br><span class="line">#       define RC_HALF  (1ULL&lt;&lt;18)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"># elif __x86_64__</span><br><span class="line">#   define ISA_MASK        0x00007ffffffffff8ULL</span><br><span class="line">#   define ISA_MAGIC_MASK  0x001f800000000001ULL</span><br><span class="line">#   define ISA_MAGIC_VALUE 0x001d800000000001ULL</span><br><span class="line">    struct &#123;</span><br><span class="line">        uintptr_t nonpointer        : 1;</span><br><span class="line">        uintptr_t has_assoc         : 1;</span><br><span class="line">        uintptr_t has_cxx_dtor      : 1;</span><br><span class="line">        uintptr_t shiftcls          : 44; // MACH_VM_MAX_ADDRESS 0x7fffffe00000</span><br><span class="line">        uintptr_t magic             : 6;</span><br><span class="line">        uintptr_t weakly_referenced : 1;</span><br><span class="line">        uintptr_t deallocating      : 1;</span><br><span class="line">        uintptr_t has_sidetable_rc  : 1;</span><br><span class="line">        uintptr_t extra_rc          : 8;</span><br><span class="line">#       define RC_ONE   (1ULL&lt;&lt;56)</span><br><span class="line">#       define RC_HALF  (1ULL&lt;&lt;7)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"># else</span><br><span class="line">#   error unknown architecture for packed isa</span><br><span class="line"># endif</span><br><span class="line"></span><br><span class="line">// SUPPORT_PACKED_ISA</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#if SUPPORT_INDEXED_ISA</span><br><span class="line"></span><br><span class="line"># if  __ARM_ARCH_7K__ &gt;= 2</span><br><span class="line"></span><br><span class="line">#   define ISA_INDEX_IS_NPI      1</span><br><span class="line">#   define ISA_INDEX_MASK        0x0001FFFC</span><br><span class="line">#   define ISA_INDEX_SHIFT       2</span><br><span class="line">#   define ISA_INDEX_BITS        15</span><br><span class="line">#   define ISA_INDEX_COUNT       (1 &lt;&lt; ISA_INDEX_BITS)</span><br><span class="line">#   define ISA_INDEX_MAGIC_MASK  0x001E0001</span><br><span class="line">#   define ISA_INDEX_MAGIC_VALUE 0x001C0001</span><br><span class="line">    struct &#123;</span><br><span class="line">        uintptr_t nonpointer        : 1;</span><br><span class="line">        uintptr_t has_assoc         : 1;</span><br><span class="line">        uintptr_t indexcls          : 15;</span><br><span class="line">        uintptr_t magic             : 4;</span><br><span class="line">        uintptr_t has_cxx_dtor      : 1;</span><br><span class="line">        uintptr_t weakly_referenced : 1;</span><br><span class="line">        uintptr_t deallocating      : 1;</span><br><span class="line">        uintptr_t has_sidetable_rc  : 1;</span><br><span class="line">        uintptr_t extra_rc          : 7;</span><br><span class="line">#       define RC_ONE   (1ULL&lt;&lt;25)</span><br><span class="line">#       define RC_HALF  (1ULL&lt;&lt;6)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"># else</span><br><span class="line">#   error unknown architecture for indexed isa</span><br><span class="line"># endif</span><br><span class="line"></span><br><span class="line">// SUPPORT_INDEXED_ISA</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>SUPPORT_PACKED_ISA</code>用于标记是否支持使用的<code>isa</code>指针包含更多的信息，其字面含义意思是<code>isa</code>的内容不再是类的指针了，而是包含了更多信息，比如引用计数，析构状态，被其他<code>weak</code>变量引用情况。判断方法也是根据设备类型，默认情况下使用64位的设备使用的都是nonpointer类型了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#if (!__LP64__  ||  TARGET_OS_WIN32  ||  TARGET_OS_SIMULATOR)</span><br><span class="line">#   define SUPPORT_PACKED_ISA 0</span><br><span class="line">#else</span><br><span class="line">#   define SUPPORT_PACKED_ISA 1</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">nonpointer</td><td style="text-align:center">之前文章已经详细分析过了，可以参考上述文章</td></tr><tr><td style="text-align:center">has_assoc</td><td style="text-align:center">表示该对象是否包含 associated object，如果没有，则析构时会更快</td></tr><tr><td style="text-align:center">has_cxx_dtor</td><td style="text-align:center">表示该对象是否有 C++ 或 ARC 的析构函数，如果没有，则析构时更快</td></tr><tr><td style="text-align:center">shiftcls</td><td style="text-align:center">类的指针</td></tr><tr><td style="text-align:center">magic</td><td style="text-align:center">固定值为 0xd2，用于在调试时分辨对象是否未完成初始化。</td></tr><tr><td style="text-align:center">weakly_referenced</td><td style="text-align:center">表示该对象是否有过weak对象，如果没有，则析构时更快</td></tr><tr><td style="text-align:center">deallocating</td><td style="text-align:center">表示该对象是否正在析构</td></tr><tr><td style="text-align:center">has_sidetable_rc</td><td style="text-align:center">表示该对象的引用计数值是否过大无法存储在isa指针</td></tr><tr><td style="text-align:center">extra_rc</td><td style="text-align:center">存储引用计数值减一后的结果</td></tr></tbody></table><p>在64位环境下，isa指针并不是就一定会存储引用计数，毕竟用 19bit （iOS 系统）保存引用计数不一定够。需要注意的是这 19 位保存的是引用计数的值减一。has_sidetable_rc 的值如果为 1，那么引用计数会存储在一个叫 SideTable 的类的属性中，后面会详细讲。</p><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><p>散列表来存储引用计数具体是用<code>DenseMap</code>类来实现，这个类中包含好多映射实例到其引用计数的键值对，并支持用<code>DenseMapIterator</code>迭代器快速查找遍历这些键值对。接着说键值对的格式：键的类型为<code>DisguisedPtr&lt;objc_object&gt;</code>，<code>DisguisedPtr</code>类是对<code>objc_object *</code>指针及其一些操作进行的封装，目的就是为了让它给人看起来不会有内存泄露的样子（真是心机裱），其内容可以理解为对象的内存地址；值的类型为<code>__darwin_size_t</code>，在<code>darwin</code>内核一般等同于<code>unsigned long</code>。其实这里保存的值也是等于引用计数减一。使用散列表保存引用计数的设计很好，即使出现故障导致对象的内存块损坏，只要引用计数表没有被破坏，依然可以顺藤摸瓜找到内存块的位置。</p><p>之前说引用计数表是个散列表，这里简要说下散列的方法。有个专门处理键的<code>DenseMapInfo</code>结构体，它针对<code>DisguisedPtr</code>做了些优化匹配键值速度的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct DenseMapInfo&lt;DisguisedPtr&lt;T&gt;&gt; &#123;</span><br><span class="line">  static inline DisguisedPtr&lt;T&gt; getEmptyKey() &#123;</span><br><span class="line">    return DisguisedPtr&lt;T&gt;((T*)(uintptr_t)-1);</span><br><span class="line">  &#125;</span><br><span class="line">  static inline DisguisedPtr&lt;T&gt; getTombstoneKey() &#123;</span><br><span class="line">    return DisguisedPtr&lt;T&gt;((T*)(uintptr_t)-2);</span><br><span class="line">  &#125;</span><br><span class="line">  static unsigned getHashValue(const T *PtrVal) &#123;</span><br><span class="line">      return ptr_hash((uintptr_t)PtrVal);</span><br><span class="line">  &#125;</span><br><span class="line">  static bool isEqual(const DisguisedPtr&lt;T&gt; &amp;LHS, const DisguisedPtr&lt;T&gt; &amp;RHS) &#123;</span><br><span class="line">      return LHS == RHS; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然这里的哈希算法会根据是否为64位平台来进行优化，算法具体细节就不深究了，我总觉得苹果在这里的hardcode是随便写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#if __LP64__</span><br><span class="line">static inline uint32_t ptr_hash(uint64_t key)</span><br><span class="line">&#123;</span><br><span class="line">    key ^= key &gt;&gt; 4;</span><br><span class="line">    key *= 0x8a970be7488fda55;</span><br><span class="line">    key ^= __builtin_bswap64(key);</span><br><span class="line">    return (uint32_t)key;</span><br><span class="line">&#125;</span><br><span class="line">#else</span><br><span class="line">static inline uint32_t ptr_hash(uint32_t key)</span><br><span class="line">&#123;</span><br><span class="line">    key ^= key &gt;&gt; 4;</span><br><span class="line">    key *= 0x5052acdb;</span><br><span class="line">    key ^= __builtin_bswap32(key);</span><br><span class="line">    return key;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>再介绍下<code>SideTable</code>这个类，它用于管理引用计数表和<code>weak</code>表，并使用<code>spinlock_lock</code>自旋锁来防止操作表结构时可能的竞态条件。它用一个64*128大小的<code>uint8_t</code>静态数组作为 buffer 来保存所有的<code>SideTable</code>实例。并提供三个公有属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spinlock_t slock;//保证原子操作的自选锁</span><br><span class="line">RefcountMap refcnts;//保存引用计数的散列表</span><br><span class="line">weak_table_t weak_table;//保存 weak 引用的全局散列表</span><br></pre></td></tr></table></figure><p>还提供了一个工厂方法，用于根据对象的地址在 buffer 中寻找对应的 SideTable 实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static SideTable *tableForPointer(const void *p)</span><br></pre></td></tr></table></figure><p><code>weak</code>表的作用是在对象执行<code>dealloc</code>的时候将所有指向该对象的<code>weak</code>指针的值设为<code>nil</code>，避免悬空指针。这是<code>weak</code>表的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct weak_table_t &#123;</span><br><span class="line">    weak_entry_t *weak_entries;</span><br><span class="line">    size_t    num_entries;</span><br><span class="line">    uintptr_t mask;</span><br><span class="line">    uintptr_t max_hash_displacement;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>苹果使用一个全局的<code>weak</code>表来保存所有的<code>weak</code>引用。并将对象作为键，<code>weak_entry_t</code>作为值。<code>weak_entry_t</code>中保存了所有指向该对象的<code>weak</code>指针。</p><p>##引用计数的操作方式</p><p>###获得引用计数</p><p>在非 ARC 环境可以使用<code>retainCount</code>方法获取某个对象的引用计数，其会调用<code>objc_object</code>的<code>rootRetainCount()</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (NSUInteger)retainCount &#123;</span><br><span class="line">    return ((id)self)-&gt;rootRetainCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ARC 时代除了使用<code>Core Foundation</code>库的<code>CFGetRetainCount()</code>方法，也可以使用<code>Runtime</code>的<code>_objc_rootRetainCount(id obj)</code>方法来获取引用计数，此时需要引入<code>&lt;objc/runtime.h&gt;</code>头文件。这个函数也是调用<code>objc_object</code>的<code>rootRetainCount()</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">inline uintptr_t </span><br><span class="line">objc_object::rootRetainCount()</span><br><span class="line">&#123;</span><br><span class="line">    if (isTaggedPointer()) return (uintptr_t)this;</span><br><span class="line"></span><br><span class="line">    sidetable_lock();</span><br><span class="line">    isa_t bits = LoadExclusive(&amp;isa.bits);</span><br><span class="line">    ClearExclusive(&amp;isa.bits);</span><br><span class="line">    if (bits.nonpointer) &#123;</span><br><span class="line">        uintptr_t rc = 1 + bits.extra_rc;</span><br><span class="line">        if (bits.has_sidetable_rc) &#123;</span><br><span class="line">            rc += sidetable_getExtraRC_nolock();</span><br><span class="line">        &#125;</span><br><span class="line">        sidetable_unlock();</span><br><span class="line">        return rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sidetable_unlock();</span><br><span class="line">    return sidetable_retainCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rootRetainCount()</code>方法对引用计数存储逻辑进行了判断，因为<code>TaggedPointer</code>前面已经说过了，可以直接获取引用计数；<code>64</code>位环境下的<code>isa</code>指针前面也说过了，所以这里的重头戏是在<code>TaggedPointer</code>无法使用时调用的<code>sidetable_retainCount()</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uintptr_t</span><br><span class="line">objc_object::sidetable_retainCount()</span><br><span class="line">&#123;</span><br><span class="line">    SideTable *table = SideTable::tableForPointer(this);</span><br><span class="line"></span><br><span class="line">    size_t refcnt_result = 1;</span><br><span class="line">    </span><br><span class="line">    spinlock_lock(&amp;table-&gt;slock);</span><br><span class="line">    RefcountMap::iterator it = table-&gt;refcnts.find(this);</span><br><span class="line">    if (it != table-&gt;refcnts.end()) &#123;</span><br><span class="line">        // this is valid for SIDE_TABLE_RC_PINNED too</span><br><span class="line">        refcnt_result += it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT;</span><br><span class="line">    &#125;</span><br><span class="line">    spinlock_unlock(&amp;table-&gt;slock);</span><br><span class="line">    return refcnt_result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sidetable_retainCount()</code>方法的逻辑就是先从<code>SideTable</code>的静态方法获取当前实例对应的<code>SideTable</code>对象，其<code>refcnts</code>属性就是之前说的存储引用计数的散列表，这里将其类型简写为<code>RefcountMap</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef objc::DenseMap&lt;DisguisedPtr&lt;objc_object&gt;,size_t,true&gt; RefcountMap;</span><br></pre></td></tr></table></figure><p>然后在引用计数表中用迭代器查找当前实例对应的键值对，获取引用计数值，并在此基础上 +1 并将结果返回。这也就是为什么之前说引用计数表存储的值为实际引用计数减一。</p><p>需要注意的是为什么这里把键值对的值做了向右移位操作<code>（it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT）</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#ifdef __LP64__</span><br><span class="line">#   define WORD_BITS 64</span><br><span class="line">#else</span><br><span class="line">#   define WORD_BITS 32</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">// The order of these bits is important.</span><br><span class="line">#define SIDE_TABLE_WEAKLY_REFERENCED (1UL&lt;&lt;0)</span><br><span class="line">#define SIDE_TABLE_DEALLOCATING      (1UL&lt;&lt;1)  // MSB-ward of weak bit</span><br><span class="line">#define SIDE_TABLE_RC_ONE            (1UL&lt;&lt;2)  // MSB-ward of deallocating bit</span><br><span class="line">#define SIDE_TABLE_RC_PINNED         (1UL&lt;&lt;(WORD_BITS-1))</span><br><span class="line"></span><br><span class="line">#define SIDE_TABLE_RC_SHIFT 2</span><br><span class="line">#define SIDE_TABLE_FLAG_MASK (SIDE_TABLE_RC_ONE-1)RefcountMap</span><br></pre></td></tr></table></figure><p>可以看出值的第一个<code>bit</code>表示该对象是否有过<code>weak</code>对象，如果没有，在析构释放内存时可以更快；第二个<code>bit</code>表示该对象是否正在析构。从第三个<code>bit</code>开始才是存储引用计数数值的地方。所以这里要做向右移两位的操作，而对引用计数的<code>+1</code>和<code>-1</code>可以使用<code>SIDE_TABLE_RC_ONE</code>,还可以用<code>SIDE_TABLE_RC_PINNED</code>来判断是否引用计数值有可能溢出。</p><p>当然不能够完全信任这个<code>_objc_rootRetainCount(id obj)</code>函数，对于已释放的对象以及不正确的对象地址，有时也返回“1”。它所返回的引用计数只是某个给定时间点上的值，该方法并未考虑到系统稍后会把自动释放池清空，因而不会将后续的释放操作从返回值里减去。<code>clang</code>会尽可能把<code>NSString</code>实现成单例对象，其引用计数会很大。如果使用了<code>TaggedPointer</code>，`NSNumber的内容有可能就不再放到堆中，而是直接写在宽敞的64位栈指针值里。其看上去和真正的 NSNumber对象一样，只是使用TaggedPointer优化了下，但其引用计数可能不准确。</p><h3 id="修改引用计数"><a href="#修改引用计数" class="headerlink" title="修改引用计数"></a>修改引用计数</h3><h4 id="retain和release"><a href="#retain和release" class="headerlink" title="retain和release"></a>retain和release</h4><p>在非 ARC 环境下可以使用<code>retain</code>和<code>release</code>方法对引用计数进行加一减一操作，它们分别调用了 <code>_objc_rootRetain(id obj)</code>和 <code>_objc_rootRelease(id obj)</code>函数，不过后两者在ARC环境下也可使用。最后这两个函数又会调用<code>objc_object</code>的下面两个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">inline id </span><br><span class="line">objc_object::rootRetain()</span><br><span class="line">&#123;</span><br><span class="line">    assert(!UseGC);</span><br><span class="line"></span><br><span class="line">    if (isTaggedPointer()) return (id)this;</span><br><span class="line">    return sidetable_retain();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool </span><br><span class="line">objc_object::rootRelease()</span><br><span class="line">&#123;</span><br><span class="line">    assert(!UseGC);</span><br><span class="line"></span><br><span class="line">    if (isTaggedPointer()) return false;</span><br><span class="line">    return sidetable_release(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的实现跟获取引用计数类似，先是看是否支持<code>TaggedPointer</code>毕竟数据存在栈指针而不是堆中，栈的管理本来就是自动的），否则去操作<code>SideTable</code>中的 <code>refcnts</code>属性，这与获取引用计数策略类似。<code>sidetable_retain()</code>将 引用计数加一后返回对象，<code>sidetable_release()</code>返回是否要执行<code>dealloc</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">bool </span><br><span class="line">objc_object::sidetable_release(bool performDealloc)</span><br><span class="line">&#123;</span><br><span class="line">#if SUPPORT_NONPOINTER_ISA</span><br><span class="line">    assert(!isa.indexed);</span><br><span class="line">#endif</span><br><span class="line">    SideTable *table = SideTable::tableForPointer(this);</span><br><span class="line"></span><br><span class="line">    bool do_dealloc = false;</span><br><span class="line"></span><br><span class="line">    if (spinlock_trylock(&amp;table-&gt;slock)) &#123;</span><br><span class="line">        RefcountMap::iterator it = table-&gt;refcnts.find(this);</span><br><span class="line">        if (it == table-&gt;refcnts.end()) &#123;</span><br><span class="line">            do_dealloc = true;</span><br><span class="line">            table-&gt;refcnts[this] = SIDE_TABLE_DEALLOCATING;</span><br><span class="line">        &#125; else if (it-&gt;second &lt; SIDE_TABLE_DEALLOCATING) &#123;</span><br><span class="line">            // SIDE_TABLE_WEAKLY_REFERENCED may be set. Don&apos;t change it.</span><br><span class="line">            do_dealloc = true;</span><br><span class="line">            it-&gt;second |= SIDE_TABLE_DEALLOCATING;</span><br><span class="line">        &#125; else if (! (it-&gt;second &amp; SIDE_TABLE_RC_PINNED)) &#123;</span><br><span class="line">            it-&gt;second -= SIDE_TABLE_RC_ONE;</span><br><span class="line">        &#125;</span><br><span class="line">        spinlock_unlock(&amp;table-&gt;slock);</span><br><span class="line">        if (do_dealloc  &amp;&amp;  performDealloc) &#123;</span><br><span class="line">            ((void(*)(objc_object *, SEL))objc_msgSend)(this, SEL_dealloc);</span><br><span class="line">        &#125;</span><br><span class="line">        return do_dealloc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return sidetable_release_slow(table, performDealloc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里知道为什么在存储引用计数时总是真正的引用计数值减一了吧。因为<code>release</code>本来是要将引用计数减一，所以存储引用计数时先预留了个“一”，在减一之前先看看存储的引用计数值是否为 0（<code>it-&gt;second &lt; SIDE_TABLE_DEALLOCATING</code>），如果是，那就将对象标记为“正在析构”（<code>it-&gt;second |= SIDE_TABLE_DEALLOCATING</code>）,并发送<code>dealloc</code>消息，返回<code>YES</code>；否则就将引用计数减一（<code>it-&gt;second -= SIDE_TABLE_RC_ONE</code>）。这样做避免了负数的产生。</p><p>除此之外，<code>Core Foundation</code>库中也提供了增减引用计数的方法。比如在使用<code>Toll-Free Bridge</code>转换时使用的<code>CFBridgingRetain</code>和<code>CFBridgingRelease</code> 方法，其本质是使用 <code>__bridge_retained</code>和 <code>__bridge_transfer</code>告诉编译器此处需要如何修改引用计数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NS_INLINE CF_RETURNS_RETAINED CFTypeRef __nullable CFBridgingRetain(id __nullable X) &#123;</span><br><span class="line">    return (__bridge_retained CFTypeRef)X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NS_INLINE id __nullable CFBridgingRelease(CFTypeRef CF_CONSUMED __nullable X) &#123;</span><br><span class="line">    return (__bridge_transfer id)X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外<code>Objective-C</code>很多实现是靠<code>Core Foundation Runtime</code>来实现，<code>Objective-C Runtime</code>源码中有些地方明确注明：<code>”// Replaced by CF“</code>，那就是意思说这块任务被<code>Core Foundation</code>库接管了。当然<code>Core Foundation</code>有一部分是开源的。还有一些<code>Objective-C Runtime</code>函数的实现被诸如<code>ObjectAlloc</code>和<code>NSZombie</code>这样的内存管理工具所替代：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Replaced by ObjectAlloc</span><br><span class="line">+ (id)allocWithZone:(struct _NSZone *)zone &#123;</span><br><span class="line">    return _objc_rootAllocWithZone(self, (malloc_zone_t *)zone);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Replaced by CF (throws an NSException)</span><br><span class="line">+ (id)init &#123;</span><br><span class="line">    return (id)self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Replaced by NSZombies</span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    _objc_rootDealloc(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="alloc-new-copy-and-mutablecopy"><a href="#alloc-new-copy-and-mutablecopy" class="headerlink" title="alloc new copy and mutablecopy"></a>alloc new copy and mutablecopy</h4><p>根据编译器的约定，这以这四个单词开头的方法都会使引用计数加一。而<code>new</code>相当于调用<code>alloc</code>后再调用<code>init</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">_objc_rootAlloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    return callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/);</span><br><span class="line">&#125;</span><br><span class="line">+ (id)alloc &#123;</span><br><span class="line">    return _objc_rootAlloc(self);</span><br><span class="line">&#125;</span><br><span class="line">+ (id)new &#123;</span><br><span class="line">    return [callAlloc(self, false/*checkNil*/) init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>alloc</code>和<code>new</code>最终都会调用<code>callAlloc</code>，默认使用<code>Objective-C 2.0</code>且忽视垃圾回收和<code>NSZone</code>，那么后续的调用顺序依次是为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class_createInstance()</span><br><span class="line">_class_createInstanceFromZone()</span><br><span class="line">calloc()</span><br></pre></td></tr></table></figure><p><code>calloc()</code>函数相比于<code>malloc()</code>函数的优点是它将分配的内存区域初始化为0，相当于<code>malloc()</code>后再用<code>memset()</code>方法初始化一遍。</p><p><code>copy</code>和<code>mutableCopy</code>都是基于<code>NSCopying</code>和<code>NSMutableCopying</code>方法约定，分别调用各类自己实现的<code>copyWithZone:</code>和<code>mutableCopyWithZone:</code>方法。这些方法无论实现方式是深拷贝还是浅拷贝，都会增加引用计数。（有些类的策略是懒拷贝，只增加引用计数但并不真的拷贝，等对象内容发生变化时再拷贝一份出来，比如 NSArray）。</p><p>在<code>retain</code>方法加符号断点会发现<code>alloc</code>, <code>new</code>, <code>copy</code>, <code>mutableCopy</code>这四个方法都会通过<code>Core Foundation</code>的<code>CFBasicHashAddValue()</code>函数来调用<code>retain</code>方法。其实<code>CF</code>有个修改和查看引用计数的入口函数<code>__CFDoExternRefOperation</code>，在<code>CFRuntime.c</code>文件中实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Objective-C引用计数原理分析&quot;&gt;&lt;a href=&quot;#Objective-C引用计数原理分析&quot; class=&quot;headerlink&quot; title=&quot;Objective-C引用计数原理分析&quot;&gt;&lt;/a&gt;Objective-C引用计数原理分析&lt;/h1&gt;&lt;ul&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LLDB的基本使用</title>
    <link href="http://www.imsiupong.top/2018/04/18/LLDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.imsiupong.top/2018/04/18/LLDB的基本使用/</id>
    <published>2018-04-18T13:29:20.000Z</published>
    <updated>2018-04-18T14:18:14.156Z</updated>
    
    <content type="html"><![CDATA[<p>#引入<br>在学习了<a href="https://objccn.io/issue-19-2/" target="_blank" rel="noopener">与调试器共舞 - LLDB 的华尔兹</a>后尝试着将学习到的知识练习一遍以加深印象</p><h2 id="LLDB的基本介绍"><a href="#LLDB的基本介绍" class="headerlink" title="LLDB的基本介绍"></a>LLDB的基本介绍</h2><p>LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。</p><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p><strong>help命令</strong>: 可以使用<code>help &lt;command&gt;</code>来了解有关命令的详细信息</p><p><strong>print命令</strong>: 也可以使用<code>prin</code>、<code>p</code>或者<code>pri</code>来替换, print命令可以打印对象, 使用print -o(po), 也可以打印不同格式的变量<code>rint/&lt;fmt&gt;</code>或<code>p/&lt;fmt&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print命令详解：当运行p count = 18表达式并输出count时，会发现结果和expression count = 18的结果是一样的，原因是因为当使用expression命令来修改某个变量的值时，expression可能需要参数，而print命令不必，expression为了标识和参数，会以--做为标识结束，以及输入的开始。</span><br><span class="line">例如： 果想要 -h 作为标识，就用 e -h -- +17，如果想计算它们的差值，就使用 e -- -h +17</span><br><span class="line">因为一般来说不使用标识的情况比较多，所以 e -- 就有了一个简写的方式，那就是 print。</span><br></pre></td></tr></table></figure><p><strong>expression命令</strong>: 可以使用<code>e</code>来替换, <code>expression</code>不仅可以改变调试器中的值，也可以改变程序中的值, 在调试器中还可以通过声明一个变量来减少输入量，不过为了能使用声明的变量, 变量必须以<code>美元符号$</code>开头</p><p>##流程控制</p><p>一般情况下，当程序运行到断点位置时，在调试条上会出现四个可以用来控制程序执行流程的按钮：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/mw690/93f43f2fgy1fqh5hklovpj207601o0hi.jpg" alt="fourControlBtn" title="">                </div>                <div class="image-caption">fourControlBtn</div>            </figure><p>从左到右，四个按钮分别是：<code>continue</code>，<code>step over</code>，<code>step into</code>，<code>step out</code></p><ol><li><code>continue</code> 会取消程序的暂停，允许程序正常执行 (要么一直执行下去，要么到达下一个断点)。在LLDB中，你可以使用<code>process continue</code>命令来达到同样的效果，它的别名为<code>continue</code>，或者也可以缩写为<code>c</code></li><li><code>step over</code>按钮，会以黑盒的方式执行一行代码。如果所在这行代码是一个函数调用，那么就不会跳进这个函数，而是会执行这个函数，然后继续。LLDB则可以使用<code>thread step-over</code>，<code>next</code>，或者<code>n</code>命令。</li><li><code>step in</code> 跳进一个函数调用来调试或者检查程序的执行情况, 或者在LLDB中使用<code>thread step in</code>，<code>step</code>，或者<code>s</code>命令。注意，如果当前行不是函数调用时，<code>next</code>和<code>step</code>效果是一样的。</li><li><code>step out</code> 会执行到下一个返回语句 (直到一个堆栈帧结束) 然后停止</li><li>调试时，还有一个很棒的函数可以用来控制程序流程：<code>thread return</code>。它有一个可选参数，在执行时它会把可选参数加载进返回寄存器里，然后立刻执行返回命令，跳出当前栈帧。这意味这函数剩余的部分不会被执行。这会给<code>ARC</code>的引用计数造成一些问题，或者会使函数内的清理部分失效。但是在函数的开头执行这个命令，是个非常好的隔离这个函数，伪造返回值的方式 。</li></ol><p>##断点</p><p>在 Xcode 的左侧面板，有一组按钮。其中一个看起来像断点。点击它打开断点导航，这是一个可以快速管理所有断点的面板。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx3.sinaimg.cn/mw690/93f43f2fgy1fqh5hklbyzj21ag0ledgt.jpg" alt="breakPointManager" title="">                </div>                <div class="image-caption">breakPointManager</div>            </figure><p>在这里你可以看到所有的断点 - 在LLDB中通过<code>breakpoint lis</code>(或者<code>br li</code>) 命令也做同样的事儿。你也可以点击单个断点来开启或关闭 - 在LLDB中使用<code>breakpoint enable &lt;breakpointID&gt;</code>和<code>breakpoint disable &lt;breakpointID&gt;</code></p><p>###创建断点</p><p>在上面的例子中，我们通过在源码页面器的滚槽16上点击来创建断点。你可以通过把断点拖拽出滚槽，然后释放鼠标来删除断点 (消失时会有一个非常可爱的噗的一下的动画)。你也可以在断点导航页选择断点，然后按下删除键删除。</p><p>要在调试器中创建断点，可以使用<code>breakpoint set</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint set -f main.m -l 16</span><br><span class="line">Breakpoint 1: where = DebuggerDance`main + 27 at main.m:16, address = 0x000000010a3f6cab</span><br></pre></td></tr></table></figure><p>也可以使用缩写形式<code>br</code>。虽然<code>b</code>是一个完全不同的命令 (_regexp-break 的缩写)，但恰好也可以实现和上面同样的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) b main.m:17</span><br><span class="line">Breakpoint 2: where = DebuggerDance`main + 52 at main.m:17, address = 0x000000010a3f6cc4</span><br></pre></td></tr></table></figure><p>也可以在一个符号 (C 语言函数) 上创建断点，而完全不用指定哪一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) b isEven</span><br><span class="line">Breakpoint 3: where = DebuggerDance`isEven + 16 at main.m:4, address = 0x000000010a3f6d00</span><br><span class="line">(lldb) br s -F isEven</span><br><span class="line">Breakpoint 4: where = DebuggerDance`isEven + 16 at main.m:4, address = 0x000000010a3f6d00</span><br></pre></td></tr></table></figure><p>这些断点会准确的停止在函数的开始。Objective-C 的方法也完全可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint set -F &quot;-[NSArray objectAtIndex:]&quot;</span><br><span class="line">Breakpoint 5: where = CoreFoundation`-[NSArray objectAtIndex:], address = 0x000000010ac7a950</span><br><span class="line">(lldb) b -[NSArray objectAtIndex:]</span><br><span class="line">Breakpoint 6: where = CoreFoundation`-[NSArray objectAtIndex:], address = 0x000000010ac7a950</span><br><span class="line">(lldb) breakpoint set -F &quot;+[NSSet setWithObject:]&quot;</span><br><span class="line">Breakpoint 7: where = CoreFoundation`+[NSSet setWithObject:], address = 0x000000010abd3820</span><br><span class="line">(lldb) b +[NSSet setWithObject:]</span><br><span class="line">Breakpoint 8: where = CoreFoundation`+[NSSet setWithObject:], address = 0x000000010abd3820</span><br></pre></td></tr></table></figure><p>如果想在 Xcode 的UI上创建符号断点，你可以点击断点栏左侧的 + 按钮。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx3.sinaimg.cn/mw690/93f43f2fgy1fqh5hkj8awj20eg05u3yh.jpg" alt="addBreakPoint" title="">                </div>                <div class="image-caption">addBreakPoint</div>            </figure><p>然后选择第三个选项：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx4.sinaimg.cn/mw690/93f43f2fgy1fqh5hksntvj20pk0e8dgi.jpg" alt="adBreakPoint" title="">                </div>                <div class="image-caption">adBreakPoint</div>            </figure><p>这时会出现一个弹出框，你可以在里面添加例如<code>-[NSArray objectAtIndex:]</code>这样的符号断点。这样每次调用这个函数的时候，程序都会停止，不管是你调用还是苹果调用。</p><p>如果你 Xcode 的 UI 上右击任意断点，然后选择 “Edit Breakpoint” 的话，会有一些非常诱人的选择。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx3.sinaimg.cn/mw690/93f43f2fgy1fqh5hkl0rdj20wg0c8dgf.jpg" alt="addBreakPoint" title="">                </div>                <div class="image-caption">addBreakPoint</div>            </figure><p>###断点行为</p><p>上面的例子中，你或许想知道每一次到达断点的时候 i 的值。我们可以使<code>p i</code>作为断点行为。这样每次到达断点的时候，都会自动运行这个命令。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx4.sinaimg.cn/mw690/93f43f2fgy1fqh5hkwgl6j21au0j2jsu.jpg" alt="breakPointAction" title="">                </div>                <div class="image-caption">breakPointAction</div>            </figure><p>你也可以添加多个行为，可以是调试器命令，shell 命令，也可以是更直接的打印：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/mw690/93f43f2fgy1fqh5hko4zfj20t20vojtd.jpg" alt="breaPointAction" title="">                </div>                <div class="image-caption">breaPointAction</div>            </figure><p>看编辑断点弹出窗口的底部，你还会看到一个选项： “Automatically continue after evaluation actions.” 。它仅仅是一个选择框，但是却很强大。选中它，调试器会运行你所有的命令，然后继续运行。看起来就像没有执行任何断点一样 (除非断点太多，运行需要一段时间，拖慢了你的程序)。</p><p>这个选项框的效果和让最后断点的最后一个行为是 continue 一样。选框只是让这个操作变得更简单。</p><p>执行断点后自动继续运行，允许你完全通过断点来修改程序！你可以在某一行停止，运行一个 expression 命令来改变变量，然后继续运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#引入&lt;br&gt;在学习了&lt;a href=&quot;https://objccn.io/issue-19-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;与调试器共舞 - LLDB 的华尔兹&lt;/a&gt;后尝试着将学习到的知识练习一遍以加深印象&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime 类和对象的理解</title>
    <link href="http://www.imsiupong.top/2018/04/18/ClassAndObjects/"/>
    <id>http://www.imsiupong.top/2018/04/18/ClassAndObjects/</id>
    <published>2018-04-18T13:29:20.000Z</published>
    <updated>2018-04-19T08:01:45.584Z</updated>
    
    <content type="html"><![CDATA[<p>#Objective-C 类和对象</p><p>##类和对象的结构</p><p>继承于NSObject的类所生成的对象在runtime中都可以表示为这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct objc_object &#123;</span><br><span class="line">private:</span><br><span class="line">    isa_t isa;</span><br><span class="line">&#125;;</span><br><span class="line">本文着重介绍类和对象 结构体中的其他参数会在后续的文章中介绍到</span><br></pre></td></tr></table></figure><p>isa就是一个isa_t类型的结构体，从名字也可以看出来这个结构体指明了这个对象是什么，也就是所属的类，isa_t结构体的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">union isa_t </span><br><span class="line">&#123;</span><br><span class="line">    Class cls; //对像所属的类在内存的位置或类的信息</span><br><span class="line">    uintptr_t bits;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到这个结构体中有个类型是Class的属性cls，里面应该存有关于这个对象的类的相关信息。</p><p>Class类的定义如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_class *Class;</span><br><span class="line">struct objc_class : objc_object &#123;</span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;             // formerly cache pointer and vtable</span><br><span class="line">    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class就是结构体objc_class,而且objc_class继承于objc_object,所以也可以把Objective-C类看成是一个对象</p><p>如果类也是继承于objc_object，那么Class也有一个isa指针，那么isa指针指向什么位置呢？</p><p>可以查看这些文章的内容: <a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html" target="_blank" rel="noopener">Class And MetaClass</a></p><p>大致内容是： 在Class之上还有一种元类(<code>MetaClass</code>)的存在，Class的isa指针指向的就是对应的MetaClass</p><p>在对象Objc中我们知道isa指向的类中描述对象的相关信息，那么相应的MetaClass中存放的就是描述类的相关信息，如方法、属性等，具体例子在文章下方</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx4.sinaimg.cn/mw690/93f43f2fgy1fqi0bj9y9pj20jg0kd751.jpg" alt="ClassAndMetaClass" title="">                </div>                <div class="image-caption">ClassAndMetaClass</div>            </figure><p>上面这张图片很清楚的展示了：对象isa、类isa之间的关系</p><h2 id="isa结构详细分析"><a href="#isa结构详细分析" class="headerlink" title="isa结构详细分析"></a>isa结构详细分析</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Objective-C 类和对象&lt;/p&gt;
&lt;p&gt;##类和对象的结构&lt;/p&gt;
&lt;p&gt;继承于NSObject的类所生成的对象在runtime中都可以表示为这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="iOS Objective-C Object Class Develop" scheme="http://www.imsiupong.top/tags/iOS-Objective-C-Object-Class-Develop/"/>
    
  </entry>
  
  <entry>
    <title>Start</title>
    <link href="http://www.imsiupong.top/2018/04/18/Start/"/>
    <id>http://www.imsiupong.top/2018/04/18/Start/</id>
    <published>2018-04-18T13:24:55.000Z</published>
    <updated>2018-04-18T13:26:26.100Z</updated>
    
    <content type="html"><![CDATA[<p>做为博客搭建后的第一条, 系统的阐述一下搭建时的想法还是很有必要的：</p><ul><li>为了记录我在开发和学习过程中学习到的新的技术知识等</li><li>阐述自己的有关技术部分想法并将之实践的过程</li><li>记录自己的其他状态等</li></ul><p>前几条博文主要以基础知识、调试技能介绍为主。后期则开始在我最大能力的前提下，尽量系统、详细的描述相关知识技能等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做为博客搭建后的第一条, 系统的阐述一下搭建时的想法还是很有必要的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了记录我在开发和学习过程中学习到的新的技术知识等&lt;/li&gt;
&lt;li&gt;阐述自己的有关技术部分想法并将之实践的过程&lt;/li&gt;
&lt;li&gt;记录自己的其他状态等&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
