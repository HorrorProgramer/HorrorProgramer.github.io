<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IMSiuPong</title>
  
  <subtitle>PangJunJie</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.imsiupong.top/"/>
  <updated>2018-04-18T14:14:38.984Z</updated>
  <id>http://www.imsiupong.top/</id>
  
  <author>
    <name>庞俊杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LLDB的基本使用</title>
    <link href="http://www.imsiupong.top/2018/04/18/LLDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.imsiupong.top/2018/04/18/LLDB的基本使用/</id>
    <published>2018-04-18T13:29:20.000Z</published>
    <updated>2018-04-18T14:14:38.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LLDB的基本介绍"><a href="#LLDB的基本介绍" class="headerlink" title="LLDB的基本介绍"></a>LLDB的基本介绍</h2><p>LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。</p><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p><strong>help命令</strong>: 可以使用<code>help &lt;command&gt;</code>来了解有关命令的详细信息</p><p><strong>print命令</strong>: 也可以使用<code>prin</code>、<code>p</code>或者<code>pri</code>来替换, print命令可以打印对象, 使用print -o(po), 也可以打印不同格式的变量<code>rint/&lt;fmt&gt;</code>或<code>p/&lt;fmt&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print命令详解：当运行p count = 18表达式并输出count时，会发现结果和expression count = 18的结果是一样的，原因是因为当使用expression命令来修改某个变量的值时，expression可能需要参数，而print命令不必，expression为了标识和参数，会以--做为标识结束，以及输入的开始。</span><br><span class="line">例如： 果想要 -h 作为标识，就用 e -h -- +17，如果想计算它们的差值，就使用 e -- -h +17</span><br><span class="line">因为一般来说不使用标识的情况比较多，所以 e -- 就有了一个简写的方式，那就是 print。</span><br></pre></td></tr></table></figure><p><strong>expression命令</strong>: 可以使用<code>e</code>来替换, <code>expression</code>不仅可以改变调试器中的值，也可以改变程序中的值, 在调试器中还可以通过声明一个变量来减少输入量，不过为了能使用声明的变量, 变量必须以<code>美元符号$</code>开头</p><p>##流程控制</p><p>一般情况下，当程序运行到断点位置时，在调试条上会出现四个可以用来控制程序执行流程的按钮：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/mw690/93f43f2fgy1fqh5hklovpj207601o0hi.jpg" alt="fourControlBtn" title="">                </div>                <div class="image-caption">fourControlBtn</div>            </figure><p>从左到右，四个按钮分别是：<code>continue</code>，<code>step over</code>，<code>step into</code>，<code>step out</code></p><ol><li><code>continue</code> 会取消程序的暂停，允许程序正常执行 (要么一直执行下去，要么到达下一个断点)。在LLDB中，你可以使用<code>process continue</code>命令来达到同样的效果，它的别名为<code>continue</code>，或者也可以缩写为<code>c</code></li><li><code>step over</code>按钮，会以黑盒的方式执行一行代码。如果所在这行代码是一个函数调用，那么就不会跳进这个函数，而是会执行这个函数，然后继续。LLDB则可以使用<code>thread step-over</code>，<code>next</code>，或者<code>n</code>命令。</li><li><code>step in</code> 跳进一个函数调用来调试或者检查程序的执行情况, 或者在LLDB中使用<code>thread step in</code>，<code>step</code>，或者<code>s</code>命令。注意，如果当前行不是函数调用时，<code>next</code>和<code>step</code>效果是一样的。</li><li><code>step out</code> 会执行到下一个返回语句 (直到一个堆栈帧结束) 然后停止</li><li>调试时，还有一个很棒的函数可以用来控制程序流程：<code>thread return</code>。它有一个可选参数，在执行时它会把可选参数加载进返回寄存器里，然后立刻执行返回命令，跳出当前栈帧。这意味这函数剩余的部分不会被执行。这会给<code>ARC</code>的引用计数造成一些问题，或者会使函数内的清理部分失效。但是在函数的开头执行这个命令，是个非常好的隔离这个函数，伪造返回值的方式 。</li></ol><p>##断点</p><p>在 Xcode 的左侧面板，有一组按钮。其中一个看起来像断点。点击它打开断点导航，这是一个可以快速管理所有断点的面板。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx3.sinaimg.cn/mw690/93f43f2fgy1fqh5hklbyzj21ag0ledgt.jpg" alt="breakPointManager" title="">                </div>                <div class="image-caption">breakPointManager</div>            </figure><p>在这里你可以看到所有的断点 - 在LLDB中通过<code>breakpoint lis</code>(或者<code>br li</code>) 命令也做同样的事儿。你也可以点击单个断点来开启或关闭 - 在LLDB中使用<code>breakpoint enable &lt;breakpointID&gt;</code>和<code>breakpoint disable &lt;breakpointID&gt;</code></p><p>###创建断点</p><p>在上面的例子中，我们通过在源码页面器的滚槽16上点击来创建断点。你可以通过把断点拖拽出滚槽，然后释放鼠标来删除断点 (消失时会有一个非常可爱的噗的一下的动画)。你也可以在断点导航页选择断点，然后按下删除键删除。</p><p>要在调试器中创建断点，可以使用<code>breakpoint set</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint set -f main.m -l 16</span><br><span class="line">Breakpoint 1: where = DebuggerDance`main + 27 at main.m:16, address = 0x000000010a3f6cab</span><br></pre></td></tr></table></figure><p>也可以使用缩写形式<code>br</code>。虽然<code>b</code>是一个完全不同的命令 (_regexp-break 的缩写)，但恰好也可以实现和上面同样的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) b main.m:17</span><br><span class="line">Breakpoint 2: where = DebuggerDance`main + 52 at main.m:17, address = 0x000000010a3f6cc4</span><br></pre></td></tr></table></figure><p>也可以在一个符号 (C 语言函数) 上创建断点，而完全不用指定哪一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) b isEven</span><br><span class="line">Breakpoint 3: where = DebuggerDance`isEven + 16 at main.m:4, address = 0x000000010a3f6d00</span><br><span class="line">(lldb) br s -F isEven</span><br><span class="line">Breakpoint 4: where = DebuggerDance`isEven + 16 at main.m:4, address = 0x000000010a3f6d00</span><br></pre></td></tr></table></figure><p>这些断点会准确的停止在函数的开始。Objective-C 的方法也完全可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint set -F &quot;-[NSArray objectAtIndex:]&quot;</span><br><span class="line">Breakpoint 5: where = CoreFoundation`-[NSArray objectAtIndex:], address = 0x000000010ac7a950</span><br><span class="line">(lldb) b -[NSArray objectAtIndex:]</span><br><span class="line">Breakpoint 6: where = CoreFoundation`-[NSArray objectAtIndex:], address = 0x000000010ac7a950</span><br><span class="line">(lldb) breakpoint set -F &quot;+[NSSet setWithObject:]&quot;</span><br><span class="line">Breakpoint 7: where = CoreFoundation`+[NSSet setWithObject:], address = 0x000000010abd3820</span><br><span class="line">(lldb) b +[NSSet setWithObject:]</span><br><span class="line">Breakpoint 8: where = CoreFoundation`+[NSSet setWithObject:], address = 0x000000010abd3820</span><br></pre></td></tr></table></figure><p>如果想在 Xcode 的UI上创建符号断点，你可以点击断点栏左侧的 + 按钮。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx3.sinaimg.cn/mw690/93f43f2fgy1fqh5hkj8awj20eg05u3yh.jpg" alt="addBreakPoint" title="">                </div>                <div class="image-caption">addBreakPoint</div>            </figure><p>然后选择第三个选项：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx4.sinaimg.cn/mw690/93f43f2fgy1fqh5hksntvj20pk0e8dgi.jpg" alt="adBreakPoint" title="">                </div>                <div class="image-caption">adBreakPoint</div>            </figure><p>这时会出现一个弹出框，你可以在里面添加例如<code>-[NSArray objectAtIndex:]</code>这样的符号断点。这样每次调用这个函数的时候，程序都会停止，不管是你调用还是苹果调用。</p><p>如果你 Xcode 的 UI 上右击任意断点，然后选择 “Edit Breakpoint” 的话，会有一些非常诱人的选择。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx3.sinaimg.cn/mw690/93f43f2fgy1fqh5hkl0rdj20wg0c8dgf.jpg" alt="addBreakPoint" title="">                </div>                <div class="image-caption">addBreakPoint</div>            </figure><p>###断点行为</p><p>上面的例子中，你或许想知道每一次到达断点的时候 i 的值。我们可以使<code>p i</code>作为断点行为。这样每次到达断点的时候，都会自动运行这个命令。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx4.sinaimg.cn/mw690/93f43f2fgy1fqh5hkwgl6j21au0j2jsu.jpg" alt="breakPointAction" title="">                </div>                <div class="image-caption">breakPointAction</div>            </figure><p>你也可以添加多个行为，可以是调试器命令，shell 命令，也可以是更直接的打印：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/mw690/93f43f2fgy1fqh5hko4zfj20t20vojtd.jpg" alt="breaPointAction" title="">                </div>                <div class="image-caption">breaPointAction</div>            </figure><p>看编辑断点弹出窗口的底部，你还会看到一个选项： “Automatically continue after evaluation actions.” 。它仅仅是一个选择框，但是却很强大。选中它，调试器会运行你所有的命令，然后继续运行。看起来就像没有执行任何断点一样 (除非断点太多，运行需要一段时间，拖慢了你的程序)。</p><p>这个选项框的效果和让最后断点的最后一个行为是 continue 一样。选框只是让这个操作变得更简单。</p><p>执行断点后自动继续运行，允许你完全通过断点来修改程序！你可以在某一行停止，运行一个 expression 命令来改变变量，然后继续运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LLDB的基本介绍&quot;&gt;&lt;a href=&quot;#LLDB的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;LLDB的基本介绍&quot;&gt;&lt;/a&gt;LLDB的基本介绍&lt;/h2&gt;&lt;p&gt;LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Start</title>
    <link href="http://www.imsiupong.top/2018/04/18/Start/"/>
    <id>http://www.imsiupong.top/2018/04/18/Start/</id>
    <published>2018-04-18T13:24:55.000Z</published>
    <updated>2018-04-18T13:26:26.100Z</updated>
    
    <content type="html"><![CDATA[<p>做为博客搭建后的第一条, 系统的阐述一下搭建时的想法还是很有必要的：</p><ul><li>为了记录我在开发和学习过程中学习到的新的技术知识等</li><li>阐述自己的有关技术部分想法并将之实践的过程</li><li>记录自己的其他状态等</li></ul><p>前几条博文主要以基础知识、调试技能介绍为主。后期则开始在我最大能力的前提下，尽量系统、详细的描述相关知识技能等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做为博客搭建后的第一条, 系统的阐述一下搭建时的想法还是很有必要的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了记录我在开发和学习过程中学习到的新的技术知识等&lt;/li&gt;
&lt;li&gt;阐述自己的有关技术部分想法并将之实践的过程&lt;/li&gt;
&lt;li&gt;记录自己的其他状态等&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
